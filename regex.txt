

*****REGULAR EXPRESSIONS*****

Regular Expressions are used for searching, matching, extracting,
and manipulating text or patterns in strings. 

-- COMMON USE CASES -- 

	1.	Validation
	    •	Ensuring input matches a specific format.

	    	Examples:
	    •	Validating an email address (/^\w+@\w+\.\w{2,}$/).
	    •	Checking if a password meets criteria (e.g., must contain uppercase, numbers, etc.).
	    •	Ensuring a phone number follows a specific format (e.g., 123-456-7890).

	2.	Searching
	    •	Finding a specific pattern in a string.

            Examples:
	    •	Searching for keywords in a text document (e.g., /(error|warning)/ to find log issues).
	    •	Locating a specific tag in HTML (e.g., /\<title\>(.*)\<\/title\>/).

	3.	Extraction
	    •   Extracting portions of text that match a pattern.

            Examples: 
	    •	Extracting a URL from a string (e.g., /https?:\/\/[^\s]+/).
	    •	Capturing text within parentheses (e.g., /\(([^)]+)\)/).

	4.	Replacement
	    •	Replacing parts of a string based on a pattern.

	        Examples:
	    •	Removing extra spaces (/\s+/ → replace with a single space).
	    •	Changing file extensions in a list (e.g., replace .txt with .csv).

	5.	Splitting
	    •	Splitting a string into parts based on a pattern.

	    	Examples:
	    •	Splitting a sentence into words (/\s+/ as the delimiter).
	    •	Splitting CSV values (/,/ as the delimiter).

	6.	Text Cleanup
	    •	Modifying or sanitizing strings.

	        Examples:
	    •	Removing non-alphanumeric characters (/[^a-zA-Z0-9]/).
	    •	Stripping HTML tags from text (/<[^>]+>/).

	7.	Parsing Structured Data
	    •	Extracting structured information from unstructured text.

            Examples:
	    •	Parsing log files to extract timestamps or error codes.
	    •	Extracting dates from a text file (e.g., /\d{4}-\d{2}-\d{2}/ for YYYY-MM-DD).

	8.	Web Scraping
	    •	Extracting data from websites or HTML documents.
	        Examples:
	    •	Extracting all hyperlinks (/<a\s+href="([^"]+)"/).
	    •	Finding specific tags or data points in HTML.



---SYNTAX BASICS---

Literals: Characters match themselves directly
    ex. /cat/ matches the string "cat"


Special Characters: Characters like . * + ? | ( ) [ ] { } ^ $ have special meanings, 
and are not literals


- Metacharacters

    Anchors: 
        "^" matches the start of a string    
            ex. /^Hello/ matches hello at the start of the string

            "Hello world" will be matched, but "Say Hello" will not. Hello has to be 
            at the beginning of the string

        "$" Matches the end of a string
            ex. /world$/ matches world at the end of the string

            "Hello world" gets matched, "world war" does not

- Character Classes

    Basic Classes:
        "." matches any single character except a newline
            ex. /h.t/ matches "hat", "hot", "hit"

            This will match any string beginning with h, ending with t, 
            and has any single character in the middle      

        "[abc]" matches any character in the set
            ex. /[aeiou]/ matches any vowel
        
        "[^abc]" matches any character not in the set
            ex. /[^aeiou]/ matches any constenant


    Ranges:
        "[a-z]" matches any character from a to z
            ex. /[0-9]/ matches any digit

    
- Quantifiers

    1. "*" matches 0 or more of the preceding element
        ex. /go*/ matches "g", "go", "goo", ...

        in this example, match "g" can be followed by either zero or more occurrences of "o"
        
    2. "+" matches 1 or more of the preceding element
        ex. /go+/ matches "go", "goo", but not "g"
        match "g" must be followed by one or more occurences of "o"

    3. "?" Matches 0 or 1 of the preceding element  
        ex. /https?/ matches "http" or "https"
        "s" can be there zero times or once

    4. "{n}" matches exactly n occurences of the preceding element
        ex. /a{3}/ matches "aaa"
        there has to be three occurences of "a"

    5. "{n,}" matches atleast n occurences
        ex. /a{2,}/ matches "aa", "aaa", etc. 
        matches if atleast 2 occurences of "a" 

    6. "{n, m}" matches between n and m occurrences
        ex. /a{2, 4}/ matches "aa", "aaa", "aaaa", etc.     
        matches if there are 2 to 4 occurrences of proceeding character(inclusive)


- Groups and Alternations

    1. Parenthesis "()" are group expressions
        ex. /(cat|dog)/ matches "cat" or "dog"

    2. Pipe (|): Alternation (OR)
        ex. /a|b/ matches "a" or "b"


- Assertions

    1. Lookahead (?=): Matches if the pattern ahead is true.
        ex. /\d(?=px)/ matches a digit followed by “px”.

	2. Negative Lookahead (?!): Matches if the pattern ahead is NOT true.
        ex. /\d(?!px)/ matches a digit not followed by “px”.

	3. Lookbehind (?<=): Matches if the pattern behind is true.
	    ex. /(?<=\$)\d+/ matches digits preceded by “$”.

	4. Negative Lookbehind (?<!): Matches if the pattern behind is NOT true.
	    ex. /(?<!\$)\d+/ matches digits not preceded by “$”.


- Shorthands

	1.	"\d" Matches any digit ([0-9]).

	2.	"\D" Matches any non-digit ([^0-9]).

	3.	"\w" Matches any word character (alphanumeric and underscore) ([a-zA-Z0-9_]).

	4.	"\W" Matches any non-word character ([^a-zA-Z0-9_]).

	5.	"\s" Matches any whitespace (space, tab, newline).

	6.	"S" Matches any non-whitespace character.


-Modifiers

Applied after the closing delimiter (e.g., /pattern/i)
	1. i: Case-insensitive matching.
    	ex. /cat/i matches “cat” and “CAT”.

	2. g: Global matching (find all matches).
		ex.  /a/g matches every “a” in “banana”.
		
	3. m: Multi-line matching. Makes ^ and $ match at line breaks.
		ex. /^foo/m matches “foo” at the start of each line.


-Escape Sequences

    1. Use a backslash to escape special characters
        ex. /\*/ matches a literal "*"


        



